#######
# Define your distance metrics and ordination methods
physeq <- merged
physeq
distance_metrics <- c("bray", "jaccard", "euclidean")  # Pick ones supported by your dataset
ordination_methods <- c("PCoA", "NMDS")
# Create a list to hold ordination results
ordination_results <- list()
# Loop over combinations and store ordination + metadata
for (dist in distance_metrics) {
for (method in ordination_methods) {
ord <- ordinate(physeq, method = method, distance = dist)
df <- plot_ordination(physeq, ord, justDF = TRUE)
# Add metadata for animation
df$Distance <- dist
df$Method <- method
ordination_results[[paste(dist, method, sep = "_")]] <- df
}
}
# Combine all ordination data
ordination_df <- bind_rows(ordination_results)
# Optional: merge sample metadata if needed
ordination_df <- cbind(ordination_df, as(sample_data(physeq)[ordination_df$SampleID, ], "data.frame"))
ordination_df
distance_metrics <- c("bray", "jaccard", "euclidean")  # Pick ones supported by your dataset
ordination_methods <- c("PCoA")
# Create a list to hold ordination results
ordination_results <- list()
# Loop over combinations and store ordination + metadata
for (dist in distance_metrics) {
for (method in ordination_methods) {
ord <- ordinate(physeq, method = method, distance = dist)
df <- plot_ordination(physeq, ord, justDF = TRUE)
# Add metadata for animation
df$Distance <- dist
df$Method <- method
ordination_results[[paste(dist, method, sep = "_")]] <- df
}
}
# Combine all ordination data
ordination_df <- bind_rows(ordination_results)
# Optional: merge sample metadata if needed
ordination_df <- cbind(ordination_df, as(sample_data(physeq)[ordination_df$SampleID, ], "data.frame"))
ordination_df
sample_data(physeq)
colnames(ordination_df)
# Optional: merge sample metadata if needed
ordination_df <- cbind(ordination_df, as(sample_data(physeq)[ordination_df$Group, ], "data.frame"))
# Plot with gganimate
p <- ggplot(ordination_df, aes(Axis.1, Axis.2, color = SampleType)) +  # Change color by your variable
geom_point(size = 3, alpha = 0.8) +
facet_wrap(~Method, scales = "free") +
labs(title = 'Ordination using {closest_state}', x = "Axis 1", y = "Axis 2") +
transition_states(Distance, transition_length = 2, state_length = 1) +
ease_aes('sine-in-out') +
theme_minimal()
# Render animation
animate(p, width = 800, height = 600, duration = 10, fps = 10)
colnames(ordination_df)
ordination_df
distance_metrics <- c("bray", "jaccard", "euclidean")  # Pick ones supported by your dataset
ordination_methods <- c("PCoA")
# Create a list to hold ordination results
ordination_results <- list()
# Loop over combinations and store ordination + metadata
for (dist in distance_metrics) {
for (method in ordination_methods) {
ord <- ordinate(physeq, method = method, distance = dist)
df <- plot_ordination(physeq, ord, justDF = TRUE)
# Add metadata for animation
df$Distance <- dist
df$Method <- method
ordination_results[[paste(dist, method, sep = "_")]] <- df
}
}
# Combine all ordination data
ordination_df <- bind_rows(ordination_results)
# Plot with gganimate
p <- ggplot(ordination_df, aes(Axis.1, Axis.2, color = SampleType)) +  # Change color by your variable
geom_point(size = 3, alpha = 0.8) +
facet_wrap(~Method, scales = "free") +
labs(title = 'Ordination using {closest_state}', x = "Axis 1", y = "Axis 2") +
transition_states(Distance, transition_length = 2, state_length = 1) +
ease_aes('sine-in-out') +
theme_minimal()
# Render animation
animate(p, width = 800, height = 600, duration = 10, fps = 10)
# Plot with gganimate
p <- ggplot(ordination_df, aes(Axis.1, Axis.2, color = Group)) +  # Change color by your variable
geom_point(size = 3, alpha = 0.8) +
facet_wrap(~Method, scales = "free") +
labs(title = 'Ordination using {closest_state}', x = "Axis 1", y = "Axis 2") +
transition_states(Distance, transition_length = 2, state_length = 1) +
ease_aes('sine-in-out') +
theme_minimal()
# Render animation
animate(p, width = 800, height = 600, duration = 10, fps = 10)
# Plot with gganimate
ggplot(ordination_df, aes(Axis.1, Axis.2, color = Group)) +  # Change color by your variable
geom_point(size = 3, alpha = 0.8) +
facet_wrap(~Method, scales = "free") +
labs(x = "Axis 1", y = "Axis 2") +
transition_time(Distance) +
ease_aes('linear')
# Plot with gganimate
ggplot(ordination_df, aes(Axis.1, Axis.2, color = Group)) +  # Change color by your variable
geom_point(size = 3, alpha = 0.8) +
facet_wrap(~Method, scales = "free") +
labs(title = 'Ordination using {closest_state}', x = "Axis 1", y = "Axis 2") +
transition_states(Distance, transition_length = 2, state_length = 1) +
ease_aes('sine-in-out') +
theme_minimal()
ordination_df
distance_metrics <- c("bray", "jaccard", "euclidean")  # Pick ones supported by your dataset
ordination_methods <- c("PCoA", "NMDS")
# Create a list to hold ordination results
ordination_results <- list()
# Loop over combinations and store ordination + metadata
for (dist in distance_metrics) {
for (method in ordination_methods) {
ord <- ordinate(physeq, method = method, distance = dist)
df <- plot_ordination(physeq, ord, justDF = TRUE)
# Add metadata for animation
df$Distance <- dist
df$Method <- method
ordination_results[[paste(dist, method, sep = "_")]] <- df
}
}
# Combine all ordination data
ordination_df <- bind_rows(ordination_results)
ordination_df
ordination_df_ <- drop_na(ordination_df)
ordination_df
ordination_df_ <- drop_na(ordination_df)
ordination_df
ordination_df <- drop_na(ordination_df)
ordination_df
# Create a list to hold ordination results
ordination_results <- list()
# Loop over combinations and store ordination + metadata
for (dist in distance_metrics) {
for (method in ordination_methods) {
ord <- ordinate(physeq, method = method, distance = dist)
df <- plot_ordination(physeq, ord, justDF = TRUE)
# Add metadata for animation
df$Distance <- dist
df$Method <- method
ordination_results[[paste(dist, method, sep = "_")]] <- df
}
}
# Combine all ordination data
ordination_df <- bind_rows(ordination_results)
ordination_df <- ordination_df %>%
mutate(
Dim1 = ifelse(Method == "PCoA", Axis.1, MDS1),
Dim2 = ifelse(Method == "PCoA", Axis.2, MDS2)
)
ordination_df
ordination_df <- ordination_df %>%
mutate(
Dim1 = ifelse(Method == "PCoA", Axis.1, NMDS1),
Dim2 = ifelse(Method == "PCoA", Axis.2, NMDS2)
)
ordination_df
View(ordination_df)
ordination_df <- ordination_df[,!names(ordination_df) %in% c("Axis.1", "Axis.2", "NMDS1", "NMDS2")]
ordination_df
# Plot with gganimate
ggplot(ordination_df, aes(Axis.1, Axis.2, color = Group)) +  # Change color by your variable
geom_point(size = 3, alpha = 0.8) +
facet_wrap(~Method, scales = "free") +
labs(title = 'Ordination using {closest_state}', x = "Axis 1", y = "Axis 2") +
transition_states(Distance, transition_length = 2, state_length = 1) +
ease_aes('sine-in-out') +
theme_minimal()
# Plot with gganimate
ggplot(ordination_df, aes(Dim1, Dim2, color = Group)) +  # Change color by your variable
geom_point(size = 3, alpha = 0.8) +
facet_wrap(~Method, scales = "free") +
labs(title = 'Ordination using {closest_state}', x = "Dim1", y = "Dim2") +
transition_states(Distance, transition_length = 2, state_length = 1) +
ease_aes('sine-in-out') +
theme_minimal()
# Plot with gganimate
ggplot(ordination_df, aes(Dim1, Dim2, color = Group)) +  # Change color by your variable
geom_point(size = 3, alpha = 0.8) +
facet_wrap(~Method, scales = "free") +
transition_states(Distance, transition_length = 2, state_length = 1) +
ease_aes('sine-in-out') +
theme_minimal()
ordination_methods <- c("PCoA")
# Create a list to hold ordination results
ordination_results <- list()
# Loop over combinations and store ordination + metadata
for (dist in distance_metrics) {
for (method in ordination_methods) {
ord <- ordinate(physeq, method = method, distance = dist)
df <- plot_ordination(physeq, ord, justDF = TRUE)
# Add metadata for animation
df$Distance <- dist
df$Method <- method
ordination_results[[paste(dist, method, sep = "_")]] <- df
}
}
# Combine all ordination data
ordination_df <- bind_rows(ordination_results)
ordination_df
# Plot with gganimate
ggplot(ordination_df, aes(Axis.1, Axis.2, color = Group)) +  # Change color by your variable
geom_point(size = 3, alpha = 0.8) +
facet_wrap(~Method, scales = "free") +
transition_states(Distance, transition_length = 2, state_length = 1) +
ease_aes('sine-in-out') +
theme_minimal()
####
library(gapminder)
install.packages("gapminder")
library(gapminder)
data(gapminder)
p <- ggplot(
gapminder,
aes(x = gdpPercap, y=lifeExp, size = pop, colour = country)
) +
geom_point(show.legend = FALSE, alpha = 0.7) +
scale_color_viridis_d() +
scale_size(range = c(2, 12)) +
scale_x_log10() +
labs(x = "GDP per capita", y = "Life expectancy")
p + transition_time(year)
p + transition_time(year)
setwd("/Users/yepesgar/Downloads")
p <- ggplot(
gapminder,
aes(x = gdpPercap, y=lifeExp, size = pop, colour = country)
) +
geom_point(show.legend = FALSE, alpha = 0.7) +
scale_color_viridis_d() +
scale_size(range = c(2, 12)) +
scale_x_log10() +
labs(x = "GDP per capita", y = "Life expectancy")
p + transition_time(year)
setwd("/Users/yepesgar/Downloads/animate")
# Plot with gganimate
ggplot(ordination_df, aes(Axis.1, Axis.2, color = Group)) +  # Change color by your variable
geom_point(size = 3, alpha = 0.8) +
facet_wrap(~Method, scales = "free") +
transition_states(Distance, transition_length = 2, state_length = 1) +
ease_aes('sine-in-out') +
theme_minimal()
distance_metrics <- c("bray", "jaccard", "euclidean")  # Pick ones supported by your dataset
ordination_methods <- c("PCoA", "NMDS")
# Create a list to hold ordination results
ordination_results <- list()
# Loop over combinations and store ordination + metadata
for (dist in distance_metrics) {
for (method in ordination_methods) {
ord <- ordinate(physeq, method = method, distance = dist)
df <- plot_ordination(physeq, ord, justDF = TRUE)
# Add metadata for animation
df$Distance <- dist
df$Method <- method
ordination_results[[paste(dist, method, sep = "_")]] <- df
}
}
# Combine all ordination data
ordination_df <- bind_rows(ordination_results)
ordination_df <- ordination_df %>%
mutate(
Dim1 = ifelse(Method == "PCoA", Axis.1, NMDS1),
Dim2 = ifelse(Method == "PCoA", Axis.2, NMDS2)
)
ordination_df <- ordination_df[,!names(ordination_df) %in% c("Axis.1", "Axis.2", "NMDS1", "NMDS2")]
ordination_df
p <- ggplot(ordination_df, aes(Dim1, Dim2, color = Group)) +  # Change color by your variable
geom_point(size = 3, alpha = 0.8) +
facet_wrap(~Method, scales = "free") +
transition_states(Distance, transition_length = 2, state_length = 1) +
ease_aes('sine-in-out') +
theme_minimal()
# Render animation
animate(p, width = 800, height = 600, duration = 10, fps = 10)
setwd("/Users/yepesgar/Downloads/animate")
# Plot with gganimate
ggplot(ordination_df, aes(Dim1, Dim2, color = Group)) +  # Change color by your variable
geom_point(size = 3, alpha = 0.8) +
facet_wrap(~Method, scales = "free") +
transition_states(Distance, transition_length = 2, state_length = 1) +
ease_aes('sine-in-out') +
theme_minimal()
# Render animation
animate(p, width = 800, height = 600, duration = 10, fps = 10)
# Plot with gganimate
ggplot(ordination_df, aes(Dim1, Dim2, color = Group)) +  # Change color by your variable
geom_point(size = 3, alpha = 0.8) +
facet_wrap(~Method, scales = "free") +
transition_states(Distance, transition_length = 2, state_length = 1) +
ease_aes('sine-in-out') +
theme_minimal()
ordination_df
# Plot with gganimate
ggplot(ordination_df, aes(Dim1, Dim2, color = Group)) +  # Change color by your variable
geom_point(size = 3, alpha = 0.8) +
facet_grid(. ~ Method, scales_x = "free", scales_x = "free") +
transition_states(Distance, transition_length = 2, state_length = 1) +
ease_aes('sine-in-out') +
theme_minimal()
# Plot with gganimate
ggplot(ordination_df, aes(Dim1, Dim2, color = Group)) +  # Change color by your variable
geom_point(size = 3, alpha = 0.8) +
facet_grid(. ~ Method, scales = "free") +
transition_states(Distance, transition_length = 2, state_length = 1) +
ease_aes('sine-in-out') +
theme_minimal()
ordination_df
nrow(ordination_df)
ordination_df$Time <- row.names(ordination_df)
# Plot with gganimate
p <- ggplot(ordination_df, aes(Dim1, Dim2, color = Group)) +  # Change color by your variable
geom_point(size = 3, alpha = 0.8) +
facet_grid(. ~ Method, scales = "free") +
#transition_states(Distance, transition_length = 2, state_length = 1) +
#ease_aes('sine-in-out') +
theme_minimal()
p + transition_time(Time)
ordination_df$Time
distance_metrics <- c("bray", "jaccard", "euclidean")  # Pick ones supported by your dataset
ordination_methods <- c("PCoA", "NMDS")
# Create a list to hold ordination results
ordination_results <- list()
# Loop over combinations and store ordination + metadata
for (dist in distance_metrics) {
for (method in ordination_methods) {
ord <- ordinate(physeq, method = method, distance = dist)
df <- plot_ordination(physeq, ord, justDF = TRUE)
# Add metadata for animation
df$Distance <- dist
df$Method <- method
ordination_results[[paste(dist, method, sep = "_")]] <- df
}
}
# Combine all ordination data
ordination_df <- bind_rows(ordination_results)
ordination_df <- ordination_df %>%
mutate(
Dim1 = ifelse(Method == "PCoA", Axis.1, NMDS1),
Dim2 = ifelse(Method == "PCoA", Axis.2, NMDS2)
)
ordination_df <- ordination_df[,!names(ordination_df) %in% c("Axis.1", "Axis.2", "NMDS1", "NMDS2")]
ordination_df$Time <- seq(1:nrow(ordiantion_df))
ordination_df$Time <- seq(1:nrow(ordination_df))
# Plot with gganimate
p <- ggplot(ordination_df, aes(Dim1, Dim2, color = Group)) +  # Change color by your variable
geom_point(size = 3, alpha = 0.8) +
facet_grid(. ~ Method, scales = "free") +
#transition_states(Distance, transition_length = 2, state_length = 1) +
#ease_aes('sine-in-out') +
theme_minimal()
p + transition_time(Time)
ordination_df$Dim1
ordination_methods <- c("PCoA")
# Create a list to hold ordination results
ordination_results <- list()
# Loop over combinations and store ordination + metadata
for (dist in distance_metrics) {
for (method in ordination_methods) {
ord <- ordinate(physeq, method = method, distance = dist)
df <- plot_ordination(physeq, ord, justDF = TRUE)
# Add metadata for animation
df$Distance <- dist
df$Method <- method
ordination_results[[paste(dist, method, sep = "_")]] <- df
}
}
# Combine all ordination data
ordination_df <- bind_rows(ordination_results)
ordination_df
# Plot with gganimate
p <- ggplot(ordination_df, aes(Axis.1, Axis.2, color = Group)) +  # Change color by your variable
geom_point(size = 3, alpha = 0.8) +
#facet_grid(. ~ Method, scales = "free_x") +
#transition_states(Distance, transition_length = 2, state_length = 1) +
#ease_aes('sine-in-out') +
theme_minimal()
p
distance_metrics <- c("bray", "jaccard", "manhattan")  # Pick ones supported by your dataset
ordination_methods <- c("PCoA", "NMDS")
# Create a list to hold ordination results
ordination_results <- list()
# Loop over combinations and store ordination + metadata
for (dist in distance_metrics) {
for (method in ordination_methods) {
ord <- ordinate(physeq, method = method, distance = dist)
df <- plot_ordination(physeq, ord, justDF = TRUE)
# Add metadata for animation
df$Distance <- dist
df$Method <- method
ordination_results[[paste(dist, method, sep = "_")]] <- df
}
}
# Combine all ordination data
ordination_df <- bind_rows(ordination_results)
ordination_df
distance_metrics <- c("bray", "jaccard", "manhattan", "euclidean")  # Pick ones supported by your dataset
ordination_methods <- c("PCoA", "NMDS")
# Create a list to hold ordination results
ordination_results <- list()
# Loop over combinations and store ordination + metadata
for (dist in distance_metrics) {
for (method in ordination_methods) {
ord <- ordinate(physeq, method = method, distance = dist)
df <- plot_ordination(physeq, ord, justDF = TRUE)
# Add metadata for animation
df$Distance <- dist
df$Method <- method
ordination_results[[paste(dist, method, sep = "_")]] <- df
}
}
# Combine all ordination data
ordination_df <- bind_rows(ordination_results)
ordination_df <- ordination_df %>%
mutate(
Dim1 = ifelse(Method == "PCoA", Axis.1, NMDS1),
Dim2 = ifelse(Method == "PCoA", Axis.2, NMDS2)
)
ordination_df <- ordination_df[,!names(ordination_df) %in% c("Axis.1", "Axis.2", "NMDS1", "NMDS2")]
ordination_df
# Plot with gganimate
p <- ggplot(ordination_df, aes(Dim1, Dim2, color = Group)) +  # Change color by your variable
geom_point(size = 7, alpha = 0.7) +
facet_grid(. ~ Method, scales = "free") +
#transition_states(Distance, transition_length = 2, state_length = 1) +
#ease_aes('sine-in-out') +
#theme_minimal()+
labs(title = 'Distance: {Distance}')
p + transition_time(Time)
ordination_df$Time <- seq(1:nrow(ordination_df))
p + transition_time(Time)
# Plot with gganimate
p <- ggplot(ordination_df, aes(Dim1, Dim2, color = Group)) +  # Change color by your variable
geom_point(size = 7, alpha = 0.7) +
facet_grid(. ~ Method, scales = "free") +
#transition_states(Distance, transition_length = 2, state_length = 1) +
#ease_aes('sine-in-out') +
#theme_minimal()+
labs(title = 'Distance: {Distance}')
p + transition_time(Time)
distance_metrics <- c("bray", "jaccard", "manhattan")  # Pick ones supported by your dataset
ordination_methods <- c("PCoA", "NMDS")
# Create a list to hold ordination results
ordination_results <- list()
# Loop over combinations and store ordination + metadata
for (dist in distance_metrics) {
for (method in ordination_methods) {
ord <- ordinate(physeq, method = method, distance = dist)
df <- plot_ordination(physeq, ord, justDF = TRUE)
# Add metadata for animation
df$Distance <- dist
df$Method <- method
ordination_results[[paste(dist, method, sep = "_")]] <- df
}
}
# Combine all ordination data
ordination_df <- bind_rows(ordination_results)
ordination_df <- ordination_df %>%
mutate(
Dim1 = ifelse(Method == "PCoA", Axis.1, NMDS1),
Dim2 = ifelse(Method == "PCoA", Axis.2, NMDS2)
)
ordination_df <- ordination_df[,!names(ordination_df) %in% c("Axis.1", "Axis.2", "NMDS1", "NMDS2")]
# Optional: merge sample metadata if needed
#ordination_df <- cbind(ordination_df, as(sample_data(physeq)[ordination_df$Group, ], "data.frame"))
ordination_df$Time <- seq(1:nrow(ordination_df))
ordination_df
# Plot with gganimate
p <- ggplot(ordination_df, aes(Dim1, Dim2, color = Group)) +
geom_point(size = 3, alpha = 0.8) +
facet_wrap(~Method, scales = "free") +
labs(title = 'Ordination using {closest_state}', x = "Dimension 1", y = "Dimension 2") +
transition_states(Distance, transition_length = 2, state_length = 1) +
ease_aes('sine-in-out') +
theme_minimal()
# Render animation
animate(p, width = 1200, height = 600, duration = 10, fps = 10)
View(ordinate_df)
View(ordination_df)
# Plot with gganimate
p <- ggplot(ordination_df, aes(Dim1, Dim2, color = Group)) +
geom_point(size = 8, alpha = 0.8) +
facet_wrap(~Method, scales = "free") +
labs(title = 'Ordination using {closest_state}', x = "Dimension 1", y = "Dimension 2") +
transition_states(Distance, transition_length = 2, state_length = 1) +
ease_aes('sine-in-out') +
# Render animation
animate(p, width = 1200, height = 600, duration = 10, fps = 10)
# Plot with gganimate
p <- ggplot(ordination_df, aes(Dim1, Dim2, color = Group)) +
geom_point(size = 8, alpha = 0.8) +
facet_wrap(~Method, scales = "free") +
labs(title = 'Ordination using {closest_state}', x = "Dimension 1", y = "Dimension 2") +
transition_states(Distance, transition_length = 2, state_length = 1) +
ease_aes('sine-in-out')
# Render animation
animate(p, width = 1200, height = 600, duration = 10, fps = 10)
# Plot with gganimate
p <- ggplot(ordination_df, aes(Dim1, Dim2, color = Group)) +
geom_point(size = 8, alpha = 0.8) +
facet_wrap(~Method, scales = "free") +
labs(title = 'Ordination using {closest_state}', x = "Dimension 1", y = "Dimension 2") +
transition_states(Distance, transition_length = 2, state_length = 1) +
ease_aes('sine-in-out')
# Render animation
animate(p, width = 1200, height = 600, duration = 10, fps = 10)
